on:
  push:
    branches:
      - master
      - develop

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      versionOut: ${{ steps.generateVersion.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: paulhatch/semantic-version@v5.4.0
        id: generateVersion
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          bump_each_commit: false
          enable_prerelease_mode: true
          version_format: "${major}.${minor}.${patch}"
      - name: Create & push tag
        if: github.ref == 'refs/heads/master' && steps.generateVersion.outputs.is_tagged == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          TAG="${{ steps.generateVersion.outputs.version_tag }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
  
  backend:
    strategy:
      matrix:
        include:
          - arch: linux-amd64
            runner: ubuntu-latest
          - arch: linux-arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    needs:
      - version
    env:
      DOCKER_SERVER_IMAGE_NAME: "ghcr.io/${{ github.repository }}/temp-backend:${{needs.version.outputs.versionOut}}-${{ matrix.arch }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: docker/setup-buildx-action@v3
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - uses: actions/checkout@v5
      - run: VERSION=${{needs.version.outputs.versionOut}} COMMIT_SHA=${GITHUB_SHA::7} make build-docker
      - run: docker push ${DOCKER_SERVER_IMAGE_NAME}
  
  backend-multi-arch:
    runs-on: ubuntu-latest
    needs:
      - backend
      - version
    env:
      DOCKER_SERVER_IMAGE_NAME: "ghcr.io/${{ github.repository }}/go-money-server:${{needs.version.outputs.versionOut}}"
      DOCKER_SERVER_TEMP_IMAGE_NAME: "ghcr.io/${{ github.repository }}/temp-backend:${{needs.version.outputs.versionOut}}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: docker/setup-buildx-action@v3
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create and push manifest
        run: |
          docker manifest create ${DOCKER_SERVER_IMAGE_NAME} \
            --amend ${DOCKER_SERVER_TEMP_IMAGE_NAME}-linux-amd64 \
            --amend ${DOCKER_SERVER_TEMP_IMAGE_NAME}-linux-arm64

          docker manifest push ${DOCKER_SERVER_IMAGE_NAME}

  frontend:
    runs-on: ubuntu-latest
    container: node:24-alpine
    needs:
      - version
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Install and build frontend
        working-directory: frontend
        run: npm install && npm run build
      - uses: actions/upload-artifact@v4
        with:
          compression-level: '6'
          path: frontend/dist/go-money
          overwrite: 'true'
          retention-days: 1
          name: 'go-money-browser'

  full:
    strategy:
      matrix:
        include:
          - arch: linux-amd64
            runner: ubuntu-latest
          - arch: linux-arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    needs:
      - backend
      - frontend
      - version
      - backend-multi-arch
    env:
      DOCKER_SERVER_IMAGE_NAME: "ghcr.io/${{ github.repository }}/go-money-server:${{needs.version.outputs.versionOut}}"
      DOCKER_FULL_IMAGE_NAME: "ghcr.io/${{ github.repository }}/temp-full:${{needs.version.outputs.versionOut}}-${{ matrix.arch }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: go-money-browser
      - run: ls
      - uses: docker/setup-buildx-action@v3
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - run: docker build -f ./build/Dockerfile.full --build-arg MAIN_IMAGE=${DOCKER_SERVER_IMAGE_NAME} -t ${DOCKER_FULL_IMAGE_NAME}  .
      - run: docker push ${DOCKER_FULL_IMAGE_NAME}

  full-multi-arch:
    runs-on: ubuntu-latest
    needs:
      - full
      - version
    env:
      DOCKER_FULL_IMAGE_NAME: "ghcr.io/${{ github.repository }}/go-money-full"
      DOCKER_FULL_IMAGE_NAME_LATEST: "ghcr.io/${{ github.repository }}/go-money-full:latest"
      
      DOCKER_TEMP_FULL_IMAGE_NAME: "ghcr.io/${{ github.repository }}/temp-full:${{needs.version.outputs.versionOut}}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: docker/setup-buildx-action@v3
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create and push manifest
        env:
          BRANCH_NAME: ${{ github.ref_name }}
          VERSION_TAG: ${{ needs.version.outputs.versionOut }}
        run: |
          TAGS=("develop")

          if [ "$BRANCH_NAME" = "master" ]; then
            TAGS=("$VERSION_TAG" "latest")
          else
            TAGS=("develop")
          fi
                    
          for TAG in "${TAGS[@]}"; do
            FULL_TAG="${DOCKER_FULL_IMAGE_NAME}:${TAG}"
          
            docker manifest create "${FULL_TAG}" \
              "${DOCKER_TEMP_FULL_IMAGE_NAME}-linux-amd64" \
              "${DOCKER_TEMP_FULL_IMAGE_NAME}-linux-arm64"
          
            docker manifest push "${FULL_TAG}"
          done
  helm:
    needs: 
      - version
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          
      - name: replace versions
        env:
          DOCKER_IMAGE_VERSION: ${{needs.version.outputs.versionOut}}
          HELM_CHART_VERSION: ${{ needs.version.outputs.versionOut }}
          TARGET_ENV: ${{needs.target-env.outputs.targetEnv}}
          CHART_FOLDER: "helm"
        run: |
          echo $HELM_CHART_VERSION
          echo $DOCKER_IMAGE_VERSION
          echo $(date +%Y%m%d%H%M%S) > $CHART_FOLDER/buildversion.txt
          sed -i 's/tag:.*$/tag:\ '"${DOCKER_IMAGE_VERSION}"'/' $CHART_FOLDER/values.yaml
          sed -i 's/appVersion:.*$/appVersion:\ '\""$DOCKER_IMAGE_VERSION"\"'/' $CHART_FOLDER/Chart.yaml
          sed -i 's/^version:.*$/version:\ '"$HELM_CHART_VERSION"'/' $CHART_FOLDER/Chart.yaml
          echo "New Chart.yaml"
          cat $CHART_FOLDER/Chart.yaml
          echo "New values.yaml"
          cat $CHART_FOLDER/values.yaml
    
      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          charts_dir: "helm"
